/*
//    FOBO Poser application
//      This program allows FOBO to be posed into different positions.
//
//    Copyright (C) 2012  Jonathan Dowdall, Project Biped (www.projectbiped.com)
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace ServoControl
{
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// Interaction logic for StateValue.xaml
    /// </summary>
    public partial class StateValue : UserControl
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    {
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //Members
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            int     index;
            bool    active;
            float   value;

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //Properties
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            public float Value { get { return value; } set { SetValue(value);} }
            public bool Active { get { return active; } set { SetActive(value); } }
            public string VariableName { get { return (string)variableName.Content; } set { variableName.Content = value; } }

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public StateValue()
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        {
            InitializeComponent();

            active = true;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void SetValue(float setValue)
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        {
            if (setValue != value)
            {
                value = setValue;
                textBox.Text = "" + (int)(value);
            }
        }

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        private void blockButton_Click(object sender, RoutedEventArgs e)
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        {
            //Active = !active;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void SetActive(bool value)
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        {
            active = value;

            if (active)
            {
                Grid.SetColumnSpan(blockButton, 1);
                blockButton.Background = Brushes.Green;
            }
            else
            {
                Grid.SetColumnSpan(blockButton, 2);
                blockButton.Background = Brushes.Red;
            }

        }

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        private void TextBox_PreviewTextInput(object sender, TextCompositionEventArgs e)
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        {
            try
            {
                int value = int.Parse(e.Text);
            }
            catch(Exception exception)
            {
                e.Handled = true;

            }


        }
    }
}
