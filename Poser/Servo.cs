/*
//    FOBO Poser application
//      This program allows FOBO to be posed into different positions.
//
//    Copyright (C) 2012  Jonathan Dowdall, Project Biped (www.projectbiped.com)
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Serialization;
using System.IO;

namespace ServoControl
{
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    [Serializable]
    public class DataRange
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    {
        public double maximum;
        public double minimum;
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    [Serializable]
    public class SensorParameters
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    {
        public DataRange raw;
        public DataRange bounds;            
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    [Serializable]
    public class Servo
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    {
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //Members
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            SensorParameters    sensor;         //sensor in raw units (0 to 255)
            DataRange           range;          //full range of the servo in degrees
            DataRange           stops;          //stops within the range to limit the servo to 
            double              offset;         //rotational offset of the 0 degree position from default 0 degree position
            double              orientation;    //rotation of the servo body in degrees
            string              name;           //name of the servo
            double              target;         //target angle of the servo in degrees
            double              angle;          //current angle of the servo in degrees (note this should only be set by feedback from the potentiometer inside of the servo)
            ServoDeviceLink     device;         //link to the device 
            bool                flipped;        //flipps the servo 180 degrees (so that the horn is on the other side of the body)
            bool                initialized;
            string              fileName;       //setttings file name

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //Properties
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            public double           Offset      { get { return offset; }      set { SetOffset(value); }}
            public double           Target      { get { return target; }      set { MoveToAngle(value); }}
            public double           Angle       { get { return angle; } }
            public double           Orientation { get { return orientation; } set { SetOrientation(value);} }
            public string           Name        { get { return name; }        set { SetName(value); }}
            public string           FileName    { get { return fileName; }    set { SetFileName(value); }}
            public bool             Flipped     { get { return flipped; }     set { SetFlipped(value); }}
            public DataRange        Range       { get { return range;}        set { SetRange(value); }}
            public DataRange        Stops       { get { return stops;}        set { SetStops(value); }}
            public SensorParameters Sensor      { get { return sensor; }      set { SetSensor(value); } }
            public ServoDeviceLink  Device      { set { SetDevice(value);} }
    
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //Events
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            public event ServoDelegate Changed;


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public Servo()
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        {
            range = new DataRange() { minimum = 0, maximum = 120 };
            stops = new DataRange() { minimum = 0, maximum = 120 };
            initialized = false;

        }

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void angleChanged(double value)
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        {
            if (angle != value)
            {
                angle = value;
                Update();
            }
        }

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        #region Accessor Methods
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            public void SetDevice(ServoDeviceLink value)
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            {

                device = value;

                device.positionChanged += new DoubleDelegate(angleChanged);
            }


            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            public void SetName(string value)
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            {
                //set the name
                if (name != value)
                {
                    name = value;
                    Update();
                }

            }

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            public void SetFileName(string value)
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            {
                //set the name
                if (fileName != value)
                {
                    fileName = value;
                    Update();
                }

            }

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            public void SetFlipped(bool value)
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            {
                //set the range
                if (flipped != value)
                {
                    flipped = value;
                    Update();
                }

            }

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            public void SetSensor(SensorParameters value)
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            {
                //set the range
                if (sensor != value)
                {
                    sensor = value;
                    Update();
                }

            }

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            public void SetRange(DataRange value)
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            {
                //set the range
                if (range.maximum != value.maximum || range.minimum != value.minimum)
                {
                    range.maximum = value.maximum;
                    range.minimum = value.minimum;
                    Update();
                }

            }

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            public void SetStops(DataRange value)
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            {
                //set the range
                if (stops.maximum != value.maximum || stops.minimum != value.minimum)
                {
                    stops.maximum = value.maximum;
                    stops.minimum = value.minimum;
                    Update();
                }

            }

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            public double ConvertRawSensorToAngle(double value)
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            {
                return (value - sensor.bounds.minimum) / (sensor.bounds.maximum - sensor.bounds.minimum) * (range.maximum - range.minimum) + range.minimum;

            }

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            public void MoveToAngle(double value)
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            {
                //set the target
                if (target != value)
                {
                    target = value;

                    //move the device
                    if(device != null)
                        device.MoveToValue(value);

                    Update();
                }

            }
        
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            public void SetOrientation(double value)
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            {
                //set the target
                if (orientation != value)
                {
                    orientation = value;
                    Update();
                }

            }

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            public void SetOffset(double value)
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            {
                //set the target
                if (offset != value)
                {
                    offset = value;
                    Update();
                }

            }

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            void Update()
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            {
                if (Changed != null)
                    Changed(this);
            }

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        #endregion
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public void SaveToXMLFile(string setFileName)
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        {
            //set the file name
            FileName = setFileName;

            // these lines do the actual serialization
            XmlSerializer   serializer    = new XmlSerializer(typeof(Servo));
            StreamWriter    writer        = new StreamWriter(fileName);

            //write to file
            serializer.Serialize(writer, this);

            //close
            writer.Close();
        }

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public void LoadFromXmlFile(string setFileName)
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        {
            //set the file name
            FileName = setFileName;

            //create the serializer object
            XmlSerializer serializer = new XmlSerializer(typeof(Servo));

            //open the file stream
            FileStream fileStream = new FileStream(fileName, FileMode.Open);

            //deserialize the file into the servo instance
            Servo servo = (Servo)serializer.Deserialize(fileStream);

            SetValues(servo);
        }

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void SetValues(Servo servo)
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        {

            name        = servo.name;
            sensor      = servo.sensor;
            range       = servo.range;
            stops       = servo.stops;
            offset      = servo.offset;
            orientation = servo.orientation;
            flipped     = servo.flipped;

            Update();
        }


    }
}
